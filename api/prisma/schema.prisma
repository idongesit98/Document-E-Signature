// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Users {
  id  String @id @default(uuid())
  firstname String
  lastname String
  email String @unique
  password String 
  role UserRole @default(USER)
  envelopes Envelope[] @relation("UserEnvelopes")
  signatures Signature[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("users")
  Document Document[]
}

model Envelope {
  id String @id @default(uuid())
  title String @unique
  description String?
  uploaderId String
  uploader Users @relation("UserEnvelopes",fields: [uploaderId],references: [id])
  recipients Recipient[]
  documents Document[]
  status EnvelopeStatus @default(DRAFT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AuditTrail AuditTrail[]
  @@map("envelopes")
}

model Document {
  id String @id @default(uuid())
  name String
  size Int
  publicId String
  resourceType String
  userId String
  user Users @relation(fields: [userId],references: [id])
  fileUrl String?
  envelopeId String?
  envelope Envelope? @relation(fields: [envelopeId],references: [id])
  signatures Signature[]
  @@map("documents")
}

model Recipient {
  id String @id @default(uuid())
  email String
  role ReceipientRole
  status SignatureStatus  @default(PENDING)
  signedAt DateTime?
  envelopeId String
  envelope Envelope @relation(fields: [envelopeId],references: [id])
  createdAt DateTime @default(now())
  @@map("recipients")
}

model AuditTrail {
  id String @id @default(uuid())
  action String
  timeStamp DateTime @default(now())
  envelopeId String
  envelope Envelope @relation(fields: [envelopeId],references: [id])
  @@map("audittrails")
}

model Signature {
  id String @id @default(uuid())
  signerId String
  documentId String
  signer Users @relation(fields: [signerId],references: [id])
  document Document @relation(fields: [documentId],references: [id])
  signedAt DateTime?
  signature  String?
  status SignatureStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([signerId,documentId])
  @@map("signatures")
}

enum UserRole {
  USER
  ADMIN
}

enum EnvelopeStatus {
  DRAFT
  SENT
  COMPLETED
  CANCELLED
}

enum SignatureStatus {
  PENDING
  SIGNED
  VIEWED
}

enum ReceipientRole {
  SIGNER 
  VIEWER
}
